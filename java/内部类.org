#+title: java内部类
#+author: congpeitong
#+email: congpeitong2022@163.com
* 内部类定义

内部类（inner class）是定义在另一个类中的类
* 使用内部类原因

+ 内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。
+ 内部类可以对同一个包中的其他类隐藏起来。
+ 当想要定义一个回调函数且不想编写大量代码时，使用匿名 （anonymous) 内部类比较便捷。

* 使用内部类访问对象状态

内部类既可以访问自身的数据域，也可以访问创建它的外围类对象的数据域

内部类的对象总有一个隐式引用，它指向了创建它的外部类对象

* 局部内部类（方法内定义）

局部类不能用 public 或 private 访问说明符进行声明。它的作用域被限定在声明这个局部类的块中。
局部类有一个优势， 即对外部世界可以完全地隐藏起来。

与其他内部类相比较，局部类还有一个优点。它们不仅能够访问包含它们的外部类， 还可以访问局部变量。不过，那些局部变量必须事实上为 final。这说明， 它们一旦赋值就绝不会改变。

* 匿名内部类

将局部内部类的使用再深人一步。 假如只创建这个类的一个对象，就不必命名了。这种类被称为匿名内部类（anonymous inner class)
#+begin_src java

  public void start(int interval, boolean beep){
      ActionListener listener = new ActionListener{
              public void actionPerformed(ActionEvent event)
              {
                  System.out.println("At the tone, the time is " + new DateO)；
                  if (beep) Toolkit.getDefaultToolkit().beep();
              }
          }；
      Timer t = new Timer(interval, listener);
      t.start0；
  }
#+end_src
它的含义是：创建一个实现 ActionListener 接口的类的新对象，需要实现的方法 actionPerformed 定义在括号内。
* 静态内部类
有时候， 使用内部类只是为了把一个类隐藏在另外一个类的内部，并不需要内部类引用外围类对象。为此，可以将内部类声明为 static, 以便取消产生的引用

在内部类不需要访问外围类对象的时候， 应该使用静态内部类。 有些程序员用嵌套类 （nested class) 表示静态内部类。

与常规内部类不同，静态内部类可以有静态域和方法。

声明在接口中的内部类自动成为 static 和 public 类。
#+begin_src java

  package staticlnneClass;

  public class StaticInnerClassTest{
      public static void main(String[] args)
      {
          doublet d = new double [20];
          for (int i = 0; i < d.length; i++)
              d[i] = 100 * Math.random0;
          ArrayAIg.Pair p = ArrayAIg.minmax (d);
          System,out.println("min = " + p.getFirst());
          System,out.println("max = " + p.getSecondO);
      }
  }
  class ArrayAIg
  {
      /**
       ,* A pair of floating-point numbers
       ,*/
      public static class Pair
      {
          private double first;
          private double second;
          /**
           ,* Constructs a pair from two floating-point numbers
           ,* @param f the fi rst number
           ,* @param s the second number
           ,*/
          public Pair(double f, double s)
          {
              first = f;
              second = s;
          }

          /**
           ,* Returns the fi rst number of the pair
           ,* return the first number
           ,*/
          public double getFirst()
          {
              return first;
          }

          public double getSecondO
          {
              return second;
          }
      }

      public static Pair mininax(doublet values)
      {
          double min = Double.POSITIVEJNFINITY;
          double max = Double . NEGATIVE_INFINITY;
          for (double v : values)
              {
                  if (min > v) min = v;
                  if (max < v) max = v;
              }
          return new Pair(min, max) ;
      }
  }
#+end_src
