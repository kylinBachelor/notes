#+TITLE: Java并发
#+AUTHOR: CONGPEITONG
#+EMAIL: congpeitong2022@163.com

* 线程定义
一个程序同时执行多个任务。通常，每一个任务称为一个线程，它是线程控制的简称。可以同时运行一个以上线程的程序称为多线程程序。

Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。

多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。

这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。

多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。

* 进程
并发执行的进程数目并不是由 CPU 数目制约的。操作系统将 CPU 的时间片分配给每一个进程， 给人并行处理的感觉。

* 多进程和多线程的区别
1. 每个进程拥有自己的一整套变量， 而线程则共享数据。
2. 共享变量使线程之间的通信比进程之间的通信更有效、 更容易。 此外， 在有些操作系统中，与进程相比较， 线程更“ 轻量级”， 创建、 撤销一个线程比启动新进程的开销要小得多。

* 一个线程的生命周期
1. 新建状态
2. 就绪状态
3. 运行状态
4. 死亡状态
6. 阻塞状态

** 新建状态:
使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。

** 就绪状态:
当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。

** 运行状态:
如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。

** 阻塞状态:
如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：

等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。

同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。

其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。

** 死亡状态:
一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。
* 通过实现runable接口创建线程
#+begin_src java
  public class thread2 {
      public static void main(String[] args) {
          Thread thread1 = new Thread(() -> {
                  for (int i = 0; i < 100; i++) {
                      System.out.println("thrad1执行中");
                  }
          });
          thread1.start();
          Thread thread2 = new Thread(() -> {
                  for (int i = 0; i < 100; i++) {
                      System.out.println("thread2执行中");
                  }
          });
          thread2.start();
          Thread thread3 = new Thread(() -> {
                  for (int i = 0; i < 100; i++) {
                      System.out.println("thread3执行中");
                  }
          });
          thread3.start();
      }
  }
#+end_src
* 通过继承Thread来创建线程
